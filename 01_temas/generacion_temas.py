import openai
import os
import logging
from pathlib import Path
import sys
import io
from logging.handlers import RotatingFileHandler
from datetime import datetime
from openai import OpenAI
import json
import random

# ----------------------------
# Configuraci√≥n de OpenAI
# ----------------------------
MODELO = "gpt-4"
OPENAI_API_KEY = os.getenv("BLOG_OPENIA_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)
TEMPERATURE = 0.7
MAX_TOKENS = 1000
NUM_TEMAS = 10

# ----------------------------
# Umbral y rutas
# ----------------------------
UMBRAL_TEMAS = 3
RUTA_JSON_TEMAS = Path(__file__).parent / "titulos.json"

# ----------------------------
# Configuraci√≥n de logging
# ----------------------------
BASE_DIR = Path(__file__).parent.parent
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        RotatingFileHandler(
            LOG_DIR / "generador_temas.log",
            maxBytes=5*1024*1024,
            backupCount=3,
            encoding='utf-8'
        ),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ----------------------------
# Prompt de generaci√≥n ajustado
# ----------------------------
PROMPT = f"""
Genera una lista de {NUM_TEMAS} temas altamente innovadores y orientados al futuro para art√≠culos t√©cnicos sobre:
- Inteligencia Artificial, Machine Learning y Deep Learning aplicados a datos financieros
- Ciencia de Datos avanzada en finanzas, econom√≠a y contabilidad
- Modelos predictivos, algoritmos de trading y an√°lisis de riesgos
- Automatizaci√≥n de procesos financieros con IA y sistemas de decisi√≥n aut√≥nomos
- Data mesh, data fabric y arquitecturas de datos orientadas a empresas y bancos
- IA generativa para optimizaci√≥n financiera, simulaciones econ√≥micas y previsiones de mercado
- Integraci√≥n de IA con Big Data y High Performance Computing en finanzas
- Explainable AI (XAI) para auditor√≠a financiera y cumplimiento regulatorio

Requisitos:
1. Temas concretos, con aplicaci√≥n pr√°ctica o t√©cnica detallada (ej: "Optimizaci√≥n de modelos predictivos para riesgo de cr√©dito usando LLMs").
2. Evitar temas gen√©ricos como 'Qu√© es Machine Learning' o 'Introducci√≥n a la IA'.
3. Evitar temas de salud, medicina o biotecnolog√≠a.
4. Formato requerido:
   - Un tema por l√≠nea
   - Sin numeraci√≥n
   - Sin caracteres especiales como *, -, etc.
   - Solo el texto del tema
"""

# ----------------------------
# Palabras prohibidas para sesgo
# ----------------------------
PALABRAS_PROHIBIDAS = [
    "qu√© es", "introducci√≥n a", "basics", "fundamentos", "principios"
]

# ----------------------------
# Funci√≥n para llamar a OpenAI
# ----------------------------
def generar_con_ia(prompt):
    try:
        response = client.chat.completions.create(
            model=MODELO,
            messages=[
                {"role": "system", "content": "Eres un experto en IA y datos aplicados a finanzas, econom√≠a y contabilidad, generando temas t√©cnicos innovadores y bien estructurados."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=MAX_TOKENS,
            temperature=TEMPERATURE,
            top_p=0.9
        )
        logger.info("üì• Respuesta cruda recibida de la API:")
        logger.info(response.choices[0].message.content)
        return response.choices[0].message.content

    except openai.AuthenticationError:
        logger.error("‚ùå Error de autenticaci√≥n: Verifica tu API Key.")
    except openai.RateLimitError as e:
        logger.error(f"‚è±Ô∏è L√≠mite de uso excedido: {str(e)}")
    except Exception as e:
        logger.error("üí• Error inesperado al llamar la API:", exc_info=True)
    return None

# ----------------------------
# Funci√≥n para procesar respuesta
# ----------------------------
def generar_temas():
    try:
        logger.info(f"üß† Generando {NUM_TEMAS} temas con el modelo '{MODELO}'...")
        respuesta = generar_con_ia(PROMPT)
        if not respuesta:
            return []

        temas = []
        for t in respuesta.split("\n"):
            t = t.strip()
            if t:
                t = t.split('.', 1)[-1].strip() if t[0].isdigit() else t
                t = t.lstrip('-* ').strip()
                temas.append(t)
        return temas[:NUM_TEMAS]
    except Exception as e:
        logger.error("üí• Error al procesar la respuesta:", exc_info=True)
        return []

# ----------------------------
# Filtrado anti-sesgo y anti-gen√©ricos
# ----------------------------
def filtrar_temas(temas):
    filtrados = []
    for t in temas:
        if len(t.split()) < 5:  # descartar demasiado cortos
            continue
        if any(p.lower() in t.lower() for p in PALABRAS_PROHIBIDAS):
            continue
        filtrados.append(t)
    return filtrados

# ----------------------------
# Guardar JSON
# ----------------------------
def guardar_json(temas):
    data = {
        "temas": temas,
        "generado_en": datetime.utcnow().isoformat()
    }
    with open(RUTA_JSON_TEMAS, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    logger.info(f"üíæ Guardados {len(temas)} temas en {RUTA_JSON_TEMAS}")

# ----------------------------
# Ejecuci√≥n principal
# ----------------------------
if __name__ == "__main__":
    start_time = datetime.now()
    logger.info("\n" + "="*60)
    logger.info("üöÄ INICIO DE EJECUCI√ìN")
    logger.info(f"üïí Inicio: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        if not RUTA_JSON_TEMAS.exists():
            temas_actuales = []
        else:
            with open(RUTA_JSON_TEMAS, "r", encoding="utf-8") as f:
                data = json.load(f)
                temas_actuales = data.get("temas", [])

        logger.info(f"üìä Temas pendientes actuales: {len(temas_actuales)}")

        if len(temas_actuales) < UMBRAL_TEMAS:
            temas_nuevos = generar_temas()
            temas_filtrados = filtrar_temas(temas_nuevos)
            if temas_filtrados:
                guardar_json(temas_filtrados)
                estado = "√âXITO"
            else:
                logger.warning("‚ö†Ô∏è No se generaron temas v√°lidos tras el filtrado.")
                estado = "FALLIDO"
        else:
            logger.info(f"‚è∏Ô∏è No se generaron nuevos temas. Hay suficientes temas pendientes (‚â• {UMBRAL_TEMAS}).")
            estado = "SALTEADO"

    except Exception as e:
        logger.critical("üö® ERROR CR√çTICO DURANTE LA EJECUCI√ìN:", exc_info=True)
        estado = "FALLIDO"

    end_time = datetime.now()
    duracion = (end_time - start_time).total_seconds()
    logger.info(f"üïì Duraci√≥n total: {duracion:.2f} segundos")
    logger.info(f"üîö ESTADO FINAL: {estado}")
    logger.info(f"üïí Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("‚úÖ EJECUCI√ìN COMPLETADA")
    logger.info("="*60 + "\n")

